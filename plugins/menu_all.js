const config = require('../settings');
const moment = require('moment-timezone');
const { malvin, commands } = require('../malvin');
const { getPrefix } = require('../lib/prefix');

function toUpperStylized(str) {
  const stylized = {
    A: '·¥Ä', B: ' ô', C: '·¥Ñ', D: '·¥Ö', E: '·¥á', F: '“ì', G: '…¢', H: ' ú',
    I: '…™', J: '·¥ä', K: '·¥ã', L: ' ü', M: '·¥ç', N: '…¥', O: '·¥è', P: '·¥ò',
    Q: '«´', R: ' Ä', S: 's', T: '·¥õ', U: '·¥ú', V: '·¥†', W: '·¥°', X: 'x',
    Y: ' è', Z: '·¥¢'
  };
  return str.split('').map(c => stylized[c.toUpperCase()] || c).join('');
}

const normalize = (str) => str.toLowerCase().replace(/\s+menu$/, '').trim();

const emojiByCategory = {
  ai: 'ü§ñ', anime: 'üç•', audio: 'üéß', bible: 'üìñ', download: '‚¨áÔ∏è',
  downloader: 'üì•', fun: 'üéÆ', game: 'üïπÔ∏è', group: 'üë•', img_edit: 'üñåÔ∏è',
  info: '‚ÑπÔ∏è', information: 'üß†', logo: 'üñºÔ∏è', main: 'üè†', media: 'üéûÔ∏è',
  menu: 'üìú', misc: 'üì¶', music: 'üéµ', other: 'üìÅ', owner: 'üëë',
  privacy: 'üîí', search: 'üîé', settings: '‚öôÔ∏è', sticker: 'üåü', tools: 'üõ†Ô∏è',
  user: 'üë§', utilities: 'üß∞', utility: 'üßÆ', wallpapers: 'üñºÔ∏è', whatsapp: 'üì±'
};

function flicker(text) {
  const variants = ['‚ú®', '‚ö°', 'üåü'];
  const random = variants[Math.floor(Math.random() * variants.length)];
  return `${random} ${text} ${random}`;
}

const bars = ['‚ñ∞‚ñ±‚ñ±‚ñ±‚ñ±', '‚ñ∞‚ñ∞‚ñ±‚ñ±‚ñ±', '‚ñ∞‚ñ∞‚ñ∞‚ñ±‚ñ±', '‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ±', '‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞'];
function getLoadingBar() {
  return bars[Math.floor(Math.random() * bars.length)];
}

malvin({
  pattern: 'menu',
  alias: ['allmenu'],
  desc: 'Show all bot commands',
  category: 'menu',
  react: 'üëå',
  filename: __filename
}, async (malvin, mek, m, { from, sender, reply }) => {
  try {
    const prefix = getPrefix();
    const timezone = config.TIMEZONE || 'Africa/Nairobi';
    const time = moment().tz(timezone).format('HH:mm:ss');
    const date = moment().tz(timezone).format('dddd, DD MMMM YYYY');

    const uptime = () => {
      let sec = process.uptime();
      let h = Math.floor(sec / 3600);
      let m = Math.floor((sec % 3600) / 60);
      let s = Math.floor(sec % 60);
      return `${h}h ${m}m ${s}s`;
    };

    // Group commands by category
    const categories = {};
    for (const cmd of commands) {
      if (cmd.category && !cmd.dontAdd && cmd.pattern) {
        const normalizedCategory = normalize(cmd.category);
        categories[normalizedCategory] = categories[normalizedCategory] || [];
        categories[normalizedCategory].push(cmd.pattern.split('|')[0]);
      }
    }

    // Build menu with clean design
    let menu = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
        ‚ö° BOT GURU ‚ö°
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üë§  User     : @${sender.split('@')[0]}
‚è±  Uptime   : ${uptime()}
üõ†  Mode     : ${config.MODE}
‚å®Ô∏è  Prefix   : ${config.PREFIX}
üëë  Owner    : ${config.OWNER_NAME}
üì¶  Plugins  : ${commands.length}
üíª  Dev      : Its guru
üóÇ  Version  : 2.0.0
üïí  Time     : ${time} (${timezone})
üìÖ  Date     : ${date}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

    for (const cat of Object.keys(categories).sort()) {
      const emoji = emojiByCategory[cat] || 'üí´';
      menu += `\n\n‚ï≠‚îÄ ${flicker(emoji + ' ' + toUpperStylized(cat) + ' Menu')} ‚îÄ‚ïÆ`;
      menu += `\n‚îÇ ${getLoadingBar()}`;
      for (const cmd of categories[cat].sort()) {
        menu += `\n‚îÇ ${prefix}${cmd}`;
      }
      menu += `\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;
    }

    // Newsletter section
    menu += `\n\n‚ï≠‚îÄ üì∞ Newsletter ‚îÄ‚ïÆ`;
    menu += `\n‚îÇ Subscribe here: ${config.NEWSLETTER_JID || '120363419810795263@newsletter'}`;
    menu += `\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ`;

    menu += `\n\n> ${config.DESCRIPTION || toUpperStylized('Explore the bot commands!')}`;

    // Send menu once
    await malvin.sendMessage(
      from,
      {
        image: { url: config.MENU_IMAGE_URL || 'https://files.catbox.moe/op2ca2.jpg' },
        caption: menu,
        contextInfo: { mentionedJid: [sender] }
      },
      { quoted: mek }
    );

    // --- Send music/audio immediately after the menu ---
    const audioUrl = config.MENU_AUDIO_URL || 'https://files.catbox.moe/p386a0.mp3';
    await malvin.sendMessage(from, {
      audio: { url: audioUrl },
      mimetype: 'audio/mp4',
      ptt: false
    }, { quoted: mek });

  } catch (e) {
    console.error('Menu Error:', e.message);
    await reply(`‚ùå ${toUpperStylized('Error')}: Failed to show menu.\n${toUpperStylized('Details')}: ${e.message}`);
  }
});
